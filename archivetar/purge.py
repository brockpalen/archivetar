# Brock Palen
# brockp@umich.edu
# 7/2020
#
# purge files using mpiFileUtils drm optionally blow away empty folders

import argparse
import logging
import os
import pathlib
import sys

from dotenv import find_dotenv, load_dotenv

from mpiFileUtils import DRm


def parse_args(args):
    """CLI options takes sys.argv[1:]."""

    parser = argparse.ArgumentParser(
        description="Un-Archive a directory prepped by archivetar",
        epilog="Brock Palen brockp@umich.edu",
    )
    parser.add_argument(
        "--dryrun", help="Print what would do but dont do it", action="store_true"
    )
    parser.add_argument(
        "--purge-list",
        help="File created by --save-purge-list generated by archivetar",
        type=str,
        required=True,
    )

    verbosity = parser.add_mutually_exclusive_group()
    verbosity.add_argument(
        "-v",
        "--verbose",
        help="Increase messages, including files as added",
        action="store_true",
    )
    verbosity.add_argument(
        "-q", "--quiet", help="Decrease messages", action="store_true"
    )

    args = parser.parse_args(args)
    return args


def main(argv):
    args = parse_args(argv[1:])
    if args.quiet:
        logging.basicConfig(level=logging.WARNING)
    elif args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    # load in config from .env
    load_dotenv(find_dotenv(), verbose=args.verbose)

    # check if cachefile given exists
    purge_list = pathlib.Path(args.purge_list)
    if not purge_list.is_file():
        logging.critical(f"{purge_list} does not exist or not a file")
        sys.exit(-2)

    # setup drm

    drm_kwargs = {}
    if args.dryrun:
        drm_kwargs["dryrun"] = True

    drm = DRm(
        inst=os.getenv("AT_MPIFILEUTILS", default="/home/brockp/mpifileutils/install"),
        mpirun=os.getenv(
            "AT_MPIRUN",
            default="/sw/arcts/centos7/stacks/gcc/8.2.0/openmpi/4.0.3/bin/mpirun",
        ),
        progress="10",
        **drm_kwargs,
    )

    drm.scancache(cachein=purge_list)

    ## dryrun
